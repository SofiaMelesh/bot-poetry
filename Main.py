import requests
import time
import json
import random
import mysql.connector
import re

TOKEN = ''
URL = f''

db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="poetry"
)

cursor = db.cursor(buffered=True)
user_states = {}


def reply_keyboard(chat_id, text, menu_type="main"):
    if menu_type == "main":
        reply_markup = {
            "keyboard": [
                [{"text": "–û –±–æ—Ç–µ"}],
                [{"text": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"}],
                [{"text": "–ì–¥–µ —è –Ω–∞—Ö–æ–∂—É—Å—å", "request_location": True}],
                [{"text": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)"}],
                [{"text": "–ö–∞—Ä—Ç–∞ —Å—Ç–∏—Ö–æ–≤"}],
                [{"text": "–ú–∞—Ä—à—Ä—É—Ç –ø–æ —Å–ª–µ–¥–∞–º –ê—Ö–º–∞—Ç–æ–≤–æ–π"}]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": False
        }
    elif menu_type == "poem_map":
        reply_markup = {
            "keyboard": [
                [{"text": "–ü–æ–∫–∞–∑–∞—Ç—å –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –±–ª–∏–∂–µ"}],
                [{"text": "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"}]  # –£–±—Ä–∞–ª –∫–Ω–æ–ø–∫—É –ê—Ö–º–∞—Ç–æ–≤–æ–π –æ—Ç—Å—é–¥–∞
            ],
            "resize_keyboard": True,
            "one_time_keyboard": False
        }

    data = {'chat_id': chat_id, 'text': text, 'reply_markup': json.dumps(reply_markup)}
    requests.post(f'{URL}sendMessage', data=data)


def send_photo(chat_id, photo_url, caption):
    try:
        print(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ URL: {photo_url}")  # –õ–æ–≥–∏—Ä—É–µ–º URL

        data = {
            'chat_id': chat_id,
            'photo': photo_url,
            'caption': caption,
            'parse_mode': 'HTML'
        }
        response = requests.post(f'{URL}sendPhoto', data=data)

        print(f"–û—Ç–≤–µ—Ç –æ—Ç Telegram API: {response.status_code}, {response.text}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

        if response.status_code != 200:
            send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ. –ö–æ–¥: {response.status_code}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


def show_poem_map(chat_id):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ URL –≤–∞—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    map_image = "https://ibb.co/VchGK9mb"
    caption = """
üó∫Ô∏è <b>–ö–∞—Ä—Ç–∞ –ø–æ—ç—Ç–∏—á–µ—Å–∫–æ–≥–æ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ –∏ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏</b>

–ù–∞ –∫–∞—Ä—Ç–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—á–µ–Ω—ã:
- –£–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–º –ø–æ—Å–≤—è—â–µ–Ω—ã —Å—Ç–∏—Ö–∏
- –†–∞–π–æ–Ω—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º–∏
- –ó–Ω–∞–∫–æ–≤—ã–µ –º–µ—Å—Ç–∞, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–≤—à–∏–µ –ø–æ—ç—Ç–æ–≤

‚ÑπÔ∏è <i>–î–∞–∂–µ –µ—Å–ª–∏ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ! 
–í –Ω–∞—à–µ–π –±–∞–∑–µ –µ—Å—Ç—å —Å—Ç–∏—Ö–∏ —Å–æ –≤—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–¥–±–µ—Ä–µ–º.</i>

"""
    send_photo(chat_id, map_image, caption)
    reply_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", "poem_map")

def show_spb_closer(chat_id):
    image_url = "https://ibb.co/VnJGPJj"
    caption = """
üèôÔ∏è <b>–°–µ—Ä–¥—Ü–µ –ø–æ—ç—Ç–∏—á–µ—Å–∫–æ–≥–æ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞</b>

–ó–¥–µ—Å—å, –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞, –≤—ã –Ω–∞–π–¥—ë—Ç–µ <b>—Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é</b> —Å—Ç–∏—Ö–æ–≤ –∏ –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Å—Ç:

üìç <b>–ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ:</b>
- –î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å –∏ –≠—Ä–º–∏—Ç–∞–∂
- –õ–µ—Ç–Ω–∏–π —Å–∞–¥ –∏ –Ω–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ù–µ–≤—ã
- –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å
- –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç –∏ –∫–∞–Ω–∞–ª –ì—Ä–∏–±–æ–µ–¥–æ–≤–∞

üìú <b>–≠—Ç–∏–º –º–µ—Å—Ç–∞–º –ø–æ—Å–≤—è—â–∞–ª–∏ —Å—Ç–∏—Ö–∏:</b>
‚Ä¢ –ü—É—à–∫–∏–Ω ‚Ä¢ –ê—Ö–º–∞—Ç–æ–≤–∞ ‚Ä¢ –ë–ª–æ–∫ ‚Ä¢ –ë—Ä–æ–¥—Å–∫–∏–π ‚Ä¢ –ú–∞–Ω–¥–µ–ª—å—à—Ç–∞–º

‚ú® <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç–µ —ç—Ç–∏ –º–µ—Å—Ç–∞ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!</b> 
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ —Ç–∞–º, –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.

<i>–ö–∞–∂–¥—ã–π –∫–∞–º–µ–Ω—å –∑–¥–µ—Å—å –¥—ã—à–∏—Ç –ø–æ—ç–∑–∏–µ–π, –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –µ—ë —É—Å–ª—ã—à–∞—Ç—å!</i>
"""
    send_photo(chat_id, image_url, caption)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    reply_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

def show_akhmatova_route(chat_id):
    image_url = "https://imgur.com/a/KefWO9L"
    caption = """
üë£ <b>–ú–∞—Ä—à—Ä—É—Ç –ø–æ —Å–ª–µ–¥–∞–º –ê–Ω–Ω—ã –ê—Ö–º–∞—Ç–æ–≤–æ–π</b>

üìç <b>–¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:</b>
1. –°—Ç–∞—Ä—Ç: <i>–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, 14</i> (–î–æ–º, –≥–¥–µ –∂–∏–ª–∞ –ê—Ö–º–∞—Ç–æ–≤–∞)
2. –§–∏–Ω–∏—à: <i>–ë–∏—Ä–∂–µ–≤–∞—è –ø–ª–æ—â–∞–¥—å, 4</i> (–†—è–¥–æ–º —Å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π "–ë—Ä–æ–¥—è—á–µ–π —Å–æ–±–∞–∫–æ–π")

üö∂‚Äç‚ôÄÔ∏è <b>–ú–∞—Ä—à—Ä—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —É–ª–∏—Ü–∞–º:</b>
- –ù–∞–±–µ—Ä–µ–∂–Ω–∞—è —Ä–µ–∫–∏ –§–æ–Ω—Ç–∞–Ω–∫–∏
- –î–≤–æ—Ä—Ü–æ–≤–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è
- –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è
- –ë–∏—Ä–∂–µ–≤–æ–π –ø–µ—Ä–µ—É–ª–æ–∫

üìú <b>–≠—Ç–∏–º –º–µ—Å—Ç–∞–º –ê—Ö–º–∞—Ç–æ–≤–∞ –ø–æ—Å–≤—è—Ç–∏–ª–∞ —Å—Ç–∏—Ö–∏:</b>
"–õ–µ—Ç–Ω–∏–π —Å–∞–¥", "–°–º—è—Ç–µ–Ω–∏–µ", "–≠–ø–∏—á–µ—Å–∫–∏–µ –º–æ—Ç–∏–≤—ã", "–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –≤ 1913 –≥–æ–¥—É"

‚ÑπÔ∏è –ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ—ç—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ 3-5 —á–∞—Å–æ–≤!

–•–æ—Ä–æ—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ —Å–ª–µ–¥–∞–º –≤–µ–ª–∏–∫–æ–π –ø–æ—ç—Ç–µ—Å—Å—ã! ‚ú®
"""
    send_photo(chat_id, image_url, caption)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    reply_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")


def send_message(chat_id, text, reply_markup=None):
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    requests.post(f'{URL}sendMessage', data=data)


def send_inline_keyboard(chat_id, text, options):
    keyboard = []
    for option in options:
        keyboard.append([{"text": option["text"], "callback_data": option["callback_data"]}])

    reply_markup = {
        "inline_keyboard": keyboard
    }

    send_message(chat_id, text, reply_markup)


def escape_html(text):
    return (
        text.replace("&", "&amp;")
        .replace("<", "&lt;")
        .replace(">", "&gt;")
    )


def format_poems(results):
    formatted = []
    for name, author, text in results:
        poem_message = (
            "üìú <b>–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ:</b> <i>{}</i>\n"
            "‚úçÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> <i>{}</i>\n\n"
            "üìù <pre>{}</pre>"
        ).format(escape_html(name), escape_html(author), escape_html(text))
        formatted.append(poem_message)
    return "\n\n".join(formatted)


def get_all_poems_list():
    cursor.execute("""
        SELECT p.poem_name, p.poem_author, p.poem_text, 
               COALESCE(d.title, s.street_title, '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') as location
        FROM poems p
        LEFT JOIN district d ON p.district_id = d.district_id
        LEFT JOIN street s ON p.street_id = s.street_id
        ORDER BY p.poem_author, p.poem_name
    """)
    return cursor.fetchall()


def get_poem_by_name_and_author(poem_name, poem_author):
    cursor.execute("""
        SELECT p.poem_name, p.poem_author, p.poem_text, 
               COALESCE(d.title, s.street_title, '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') as location
        FROM poems p
        LEFT JOIN district d ON p.district_id = d.district_id
        LEFT JOIN street s ON p.street_id = s.street_id
        WHERE p.poem_name = %s AND p.poem_author = %s
    """, (poem_name, poem_author))
    return cursor.fetchone()


def send_poems_list(chat_id):
    poems = get_all_poems_list()
    if not poems:
        send_message(chat_id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        return

    poems_list = []
    for idx, (name, author, _, location) in enumerate(poems, 1):
        poems_list.append(
            f"{idx}. <b>{escape_html(author)}</b> - {escape_html(name)}\n"
            f"   üìç {escape_html(location)}"
        )

    message = (
            "üìö <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π:</b>\n\n" +
            "\n\n".join(poems_list) +
            "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )

    user_states[chat_id] = {
        'state': 'awaiting_poem_selection',
        'poems': poems
    }

    send_message(chat_id, message)


def send_selected_poem(chat_id, poem_number):
    state = user_states.get(chat_id, {})
    if state.get('state') != 'awaiting_poem_selection':
        send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        return

    poems = state.get('poems', [])
    if not poems:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        send_message(chat_id, "–°–ø–∏—Å–æ–∫ —Å—Ç–∏—Ö–æ–≤ –ø—É—Å—Ç. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ.")
        return
    try:
        poem_number = int(poem_number)
        if 1 <= poem_number <= len(poems):
            poem_name, poem_author, _, location = poems[poem_number - 1]
            poem_info = get_poem_by_name_and_author(poem_name, poem_author)
            if poem_info:
                name, author, text, location = poem_info
                message = (
                    "üìú <b>–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ:</b> <i>{}</i>\n"
                    "‚úçÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> <i>{}</i>\n"
                    "üìç <b>–ú–µ—Å—Ç–æ:</b> <i>{}</i>\n\n"
                    "üìù <pre>{}</pre>"
                ).format(
                    escape_html(name),
                    escape_html(author),
                    escape_html(location),
                    escape_html(text)
                )
                send_message(chat_id, message)

                # Ask the user if they want to select another poem
                send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.")
            else:
                send_message(chat_id, "–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            send_message(chat_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(poems)}")
    except ValueError:
        send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è —Ü–∏—Ñ—Ä–∞–º–∏.")


def normalize(text):
    return re.sub(r'[^–∞-—è—ëa-z0-9 ]', '', text.lower()).strip()


def check_message(chat_id, message):
    global user_states

    if message.lower() == '/start':
        user_states.pop(chat_id, None)
        send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ—ç—Ç–∞—Ö –ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞.")
        reply_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    elif message.lower() == '–∫–∞—Ä—Ç–∞ —Å—Ç–∏—Ö–æ–≤':
        show_poem_map(chat_id)
        user_states[chat_id] = None

    elif message.lower() == '–º–∞—Ä—à—Ä—É—Ç –ø–æ —Å–ª–µ–¥–∞–º –∞—Ö–º–∞—Ç–æ–≤–æ–π':  # –û–±–Ω–æ–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É
        show_akhmatova_route(chat_id)
        user_states[chat_id] = None

    elif message.lower() == '–ø–æ–∫–∞–∑–∞—Ç—å —Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥ –±–ª–∏–∂–µ':
        show_spb_closer(chat_id)
        user_states[chat_id] = None

    elif message.lower() == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        reply_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        user_states[chat_id] = None

    elif message.lower() == '–æ –±–æ—Ç–µ':
        bot_info = """
        <b>üìö –ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏</b>

        –Ø —Å–æ–±–∏—Ä–∞—é —Å—Ç–∏—Ö–∏ –∫–∞–∫ –ø–∞–∑–ª –≥–æ—Ä–æ–¥–∞ - –∏–∑ –∫–∞–∂–¥–æ–π —É–ª–∏—Ü—ã, –∫–∞–∂–¥–æ–≥–æ –¥–≤–æ—Ä–∞. 

        –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ:
        üìç –°–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é 
        üèõ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
        üìñ –ò–ª–∏ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏–∑ –ø–æ–ª–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏

        –Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –ü–µ—Ç–µ—Ä–±—É—Ä–≥ –≥–ª–∞–∑–∞–º–∏ –ø–æ—ç—Ç–æ–≤ - –æ—Ç –ü—É—à–∫–∏–Ω–∞ –¥–æ –ë—Ä–æ–¥—Å–∫–æ–≥–æ.

        –ù–∞–π–¥–∏ –ø–æ—ç–∑–∏—é –≤–æ–∫—Ä—É–≥ —Å–µ–±—è!
        """
        send_message(chat_id, bot_info)
        reply_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        user_states[chat_id] = None

    elif message.lower() == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)':
        send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–º–µ—Ç–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º.')
        user_states[chat_id] = 'awaiting_address'

    elif message.lower() == '–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è':
        poems = get_all_poems_list()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏—Ö–æ–≤
        if not poems:
            send_message(chat_id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ò —Å–ø–∏—Å–æ–∫ —Å—Ç–∏—Ö–æ–≤
        user_states[chat_id] = {
            'state': 'awaiting_poem_selection',
            'poems': poems  # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫!
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        poems_list = []
        for idx, (name, author, _, location) in enumerate(poems, 1):
            poems_list.append(
                f"{idx}. <b>{escape_html(author)}</b> - {escape_html(name)}\n"
                f"   üìç {escape_html(location)}"
            )

        message = "üìö <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π:</b>\n\n" + "\n\n".join(poems_list)
        send_message(chat_id, message + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")

    elif chat_id in user_states:
        state = user_states[chat_id]

        if state == 'awaiting_address':
            location_info = geocode_address(message)
            if location_info:
                lat, lon, address = location_info
                user_states[chat_id] = {
                    'state': 'awaiting_confirmation',
                    'address_info': address,
                    'latitude': lat,
                    'longitude': lon
                }
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –î–∞/–ù–µ—Ç
                options = [
                    {"text": "–î–∞", "callback_data": "address_confirm_yes"},
                    {"text": "–ù–µ—Ç", "callback_data": "address_confirm_no"}
                ]
                send_inline_keyboard(chat_id, f"{address}\n\n–≠—Ç–æ —Ç–æ—Ç –∞–¥—Ä–µ—Å?", options)
            else:
                send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        elif isinstance(state, dict) and state.get('state') == 'awaiting_poem_selection':
            send_selected_poem(chat_id, message)
            # Keep the user in the same state to allow repeated poem selection
            user_states[chat_id]['state'] = 'awaiting_poem_selection'
        else:
            reply_keyboard(chat_id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.')
            user_states[chat_id] = None
    else:
        reply_keyboard(chat_id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.')


def handle_callback_query(callback_query):
    chat_id = callback_query['message']['chat']['id']
    callback_data = callback_query['data']
    message_id = callback_query['message']['message_id']

    if callback_data == 'address_confirm_yes':
        state = user_states.get(chat_id, {})
        if isinstance(state, dict) and state.get('state') == 'awaiting_confirmation':
            address = state['address_info']
            poem = get_poem_by_location(address)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            requests.post(f'{URL}deleteMessage', json={
                'chat_id': chat_id,
                'message_id': message_id
            })
            send_message(chat_id, poem)
            user_states[chat_id] = 'default'
            reply_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    elif callback_data == 'address_confirm_no':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        requests.post(f'{URL}deleteMessage', json={
            'chat_id': chat_id,
            'message_id': message_id
        })
        send_message(chat_id, "–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–Ω–æ–≤–∞ (—É—Ç–æ—á–Ω–∏—Ç–µ):")
        user_states[chat_id] = 'awaiting_address'


def get_updates(offset=0):
    result = requests.get(f'{URL}getUpdates?offset={offset}').json()
    print(f"–û—Ç–≤–µ—Ç –æ—Ç getUpdates: {json.dumps(result, indent=2)}")
    return result.get('result', [])


def geocode_address(address):
    token = 'pk.c198157a80eda06853578215b58c41d1'
    headers = {"Accept-Language": "ru"}
    response = requests.get(
        f'https://eu1.locationiq.com/v1/search.php?key={token}&q={address}&format=json',
        headers=headers
    ).json()
    print(f"–û—Ç–≤–µ—Ç –æ—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {json.dumps(response, indent=2)}")
    if response and isinstance(response, list):
        place = response[0]
        return place['lat'], place['lon'], place.get("display_name")
    return None


def geocoder(latitude, longitude):
    token = 'pk.c198157a80eda06853578215b58c41d1'
    headers = {"Accept-Language": "ru"}
    address = requests.get(
        f'https://eu1.locationiq.com/v1/reverse.php?key={token}&lat={latitude}&lon={longitude}&format=json',
        headers=headers
    ).json()
    print(f"–û—Ç–≤–µ—Ç –æ—Ç —Ä–µ–≤–µ—Ä—Å-–≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {json.dumps(address, indent=2)}")
    return address.get("display_name")


def get_poem_by_location(address):
    debug_output = []
    debug_output.append(f"üìç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {address}")
    if address is None:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å."
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É –∏–ª–∏ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    if '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥' not in address.lower() and '–ø–µ—Ç–µ—Ä–±—É—Ä–≥' not in address.lower():
        if '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' not in address.lower():
            return (
                "üåç –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–µ –≤ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.\n\n"
                "üìù –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å–æ —Å—Ç–∏—Ö–∞–º–∏, –ø–æ—Å–≤—è—â—ë–Ω–Ω—ã–º–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É "
                "–∏ –µ–≥–æ —Ä–∞–π–æ–Ω–∞–º, –≤–∫–ª—é—á–∞—è –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫—É—é –æ–±–ª–∞—Å—Ç—å.\n\n"
                "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∞–¥—Ä–µ—Å, –æ—Ç–Ω–æ—Å—è—â–∏–π—Å—è –∫ —ç—Ç–æ–º—É —Ä–µ–≥–∏–æ–Ω—É."
            )

    normalized_address = normalize(address)
    found_poems = []

    # –ü–æ–∏—Å–∫ –ø–æ —É–ª–∏—Ü–∞–º —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
    cursor.execute("SELECT street_id, street_title, district_id FROM street")
    streets = cursor.fetchall()

    matched_streets = []
    for street_id, street_title, district_id in streets:
        street_words = normalize(street_title).split()
        address_words = normalized_address.split()

        common_words = set(street_words) & set(address_words)
        if common_words:
            matched_streets.append((street_id, street_title, district_id, len(common_words)))

    matched_streets.sort(key=lambda x: x[3], reverse=True)

    if matched_streets:
        street_id, street_title, district_id, _ = matched_streets[0]
        debug_output.append(f"üèô –ù–∞–π–¥–µ–Ω–∞ —É–ª–∏—Ü–∞: {street_title} (ID: {street_id})")

        cursor.execute("""
            SELECT poem_name, poem_author, poem_text 
            FROM poems 
            WHERE street_id = %s
            ORDER BY RAND() 
            LIMIT 3
        """, (street_id,))
        street_poems = cursor.fetchall()

        if street_poems:
            debug_output.append(f"üìñ –ù–∞–π–¥–µ–Ω–æ {len(street_poems)} —Å—Ç–∏—Ö–æ–≤ –ø–æ —É–ª–∏—Ü–µ {street_title}")
            found_poems.extend(street_poems)
        else:
            debug_output.append(f"‚ÑπÔ∏è –î–ª—è —É–ª–∏—Ü—ã {street_title} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∏—Ö–æ–≤")

    # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–π–æ–Ω—É, –µ—Å–ª–∏ —Å—Ç–∏—Ö–æ–≤ –ø–æ —É–ª–∏—Ü–µ –Ω–µ—Ç
    if not found_poems:
        cursor.execute("""
            SELECT poem_name, poem_author, poem_text
            FROM poems 
            WHERE district_id = %s
            ORDER BY RAND() 
            LIMIT 3
        """, (district_id,))
        district_poems = cursor.fetchall()

        if district_poems:
            debug_output.append(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(district_poems)} —Å—Ç–∏—Ö–æ–≤ –ø–æ —Ä–∞–π–æ–Ω—É —Å ID {district_id}")
            found_poems.extend(district_poems)
        else:
            debug_output.append(f"‚ÑπÔ∏è –î–ª—è —Ä–∞–π–æ–Ω–∞ —Å ID {district_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∏—Ö–æ–≤")

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –∏–∑ —Ä–∞–π–æ–Ω–∞ 25
    if not found_poems:
        debug_output.append("üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∏—Ö–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É –∞–¥—Ä–µ—Å—É. –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ª—É—á–∞–π–Ω—ã–µ:")

        cursor.execute("""
            SELECT poem_name, poem_author, poem_text 
            FROM poems 
            WHERE district_id = 25 
            ORDER BY RAND() 
            LIMIT 3
        """)
        random_poems = cursor.fetchall()

        if random_poems:
            found_poems.extend(random_poems)
            debug_output.append(f"üé≤ –í—ã–±—Ä–∞–Ω–æ {len(random_poems)} —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π")
        else:
            debug_output.append("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    if found_poems:
        return "\n".join(debug_output) + "\n\n" + format_poems(found_poems)
    else:
        debug_output.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π")
        return "\n".join(debug_output)



def run():
    update_id = None
    while True:
        time.sleep(3)
        messages = get_updates(update_id)

        if not messages:
            continue

        for message in messages:
            if 'update_id' not in message:
                continue

            update_id = message['update_id'] + 1

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if 'message' in message:
                chat_id = message['message'].get('chat', {}).get('id', None)
                if chat_id is None:
                    continue

                user_message = message['message'].get('text')
                if user_message:
                    check_message(chat_id, user_message)

                user_location = message['message'].get('location')
                if user_location:
                    latitude = user_location['latitude']
                    longitude = user_location['longitude']
                    address = geocoder(latitude, longitude)
                    send_message(chat_id, address)
                    poem = get_poem_by_location(address)
                    send_message(chat_id, poem)
                    user_states[chat_id] = None
                    reply_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")


            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
            elif 'callback_query' in message:
                handle_callback_query(message['callback_query'])


if __name__ == '__main__':
    run()
