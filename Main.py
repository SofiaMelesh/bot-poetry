import requests
import time
import json
import random
import mysql.connector

TOKEN = '7680395003:AAFDsDd1KzrREdG-529OUIiRw2xqz2afwx0'
URL = f'https://api.telegram.org/bot{TOKEN}/'

db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="Bim2005201725-",
    database="poetry"
)

cursor = db.cursor()
user_states = {}


def reply_keyboard(chat_id, text):
    reply_markup = {
        "keyboard": [
            [{"text": "–û –±–æ—Ç–µ"}],
            [{"text": "–ì–¥–µ —è –Ω–∞—Ö–æ–∂—É—Å—å", "request_location": True}],
            [{"text": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False,
        "input_field_placeholder": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏"
    }
    data = {'chat_id': chat_id, 'text': text, 'reply_markup': json.dumps(reply_markup)}
    requests.post(f'{URL}sendMessage', data=data)


def send_message(chat_id, text):
    requests.get(f'{URL}sendMessage?chat_id={chat_id}&text={text}')


def get_updates(offset=0):
    result = requests.get(f'{URL}getUpdates?offset={offset}').json()
    return result.get('result', [])


def geocode_address(address):
    token = 'pk.c198157a80eda06853578215b58c41d1'
    headers = {"Accept-Language": "ru"}
    response = requests.get(
        f'https://eu1.locationiq.com/v1/search.php?key={token}&q={address}&format=json',
        headers=headers
    ).json()
    if response and isinstance(response, list):
        place = response[0]
        return place['lat'], place['lon'], place.get("display_name")
    return None


def geocoder(latitude, longitude):
    token = 'pk.c198157a80eda06853578215b58c41d1'
    headers = {"Accept-Language": "ru"}
    address = requests.get(
        f'https://eu1.locationiq.com/v1/reverse.php?key={token}&lat={latitude}&lon={longitude}&format=json',
        headers=headers
    ).json()
    return address.get("display_name")


import random  # –Ω–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞

def get_poem_by_location(address):
    if '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥' not in address.lower() and '–ø–µ—Ç–µ—Ä–±—É—Ä–≥' not in address.lower():
        return (
            "üåç –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–µ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.\n\n"
            "üìù –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å–æ —Å—Ç–∏—Ö–∞–º–∏, –ø–æ—Å–≤—è—â—ë–Ω–Ω—ã–º–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É "
            "–∏ –µ–≥–æ —Ä–∞–π–æ–Ω–∞–º, –≤–∫–ª—é—á–∞—è –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫—É—é –æ–±–ª–∞—Å—Ç—å.\n\n"
            "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∞–¥—Ä–µ—Å, –æ—Ç–Ω–æ—Å—è—â–∏–π—Å—è –∫ —ç—Ç–æ–º—É —Ä–µ–≥–∏–æ–Ω—É."
        )

    # 1. –ü–æ–∏—Å–∫ –ø–æ —É–ª–∏—Ü–µ
    cursor.execute("SELECT street_id, street_title, district_id FROM street")
    street_rows = cursor.fetchall()

    for street_id, street_title, district_id in street_rows:
        if street_title.lower() in address.lower():
            # –ü–æ–∏—Å–∫ —Å—Ç–∏—Ö–æ–≤ –ø–æ street_id
            cursor.execute(
                "SELECT poem_name, poem_author, poem_text FROM poems WHERE street_id = %s",
                (street_id,)
            )
            results = cursor.fetchall()
            if results:
                return format_poems(results)

            # –ï—Å–ª–∏ –ø–æ —É–ª–∏—Ü–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∏—â–µ–º –ø–æ district_id —ç—Ç–æ–π —É–ª–∏—Ü—ã
            cursor.execute(
                "SELECT poem_name, poem_author, poem_text FROM poems WHERE district_id = %s",
                (district_id,)
            )
            district_results = cursor.fetchall()
            if district_results:
                return format_poems(district_results)

            break  # –ù–∞—à–ª–∏ —É–ª–∏—Ü—É, –Ω–æ –Ω–∏—á–µ–≥–æ ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ —É–ª–∏—Ü—ã

    # 2. –ï—Å–ª–∏ —É–ª–∏—Ü—É –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∏—â–µ–º –ø–æ district –Ω–∞–ø—Ä—è–º—É—é
    cursor.execute("SELECT district_id, title FROM district")
    district_rows = cursor.fetchall()
    for district_id, title in district_rows:
        if title.lower() in address.lower():
            cursor.execute(
                "SELECT poem_name, poem_author, poem_text FROM poems WHERE district_id = %s",
                (district_id,)
            )
            results = cursor.fetchall()
            if results:
                return format_poems(results)

    # 3. –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑ —Ä–∞–π–æ–Ω–∞ —Å ID 25
    cursor.execute("SELECT poem_name, poem_author, poem_text FROM poems WHERE district_id = 25")
    fallback = cursor.fetchall()
    if fallback:
        return format_poems([random.choice(fallback)])
    else:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."



def format_poems(results):
    return "\n\n".join([f"–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ: {name}\n–ê–≤—Ç–æ—Ä: {author}\n–¢–µ–∫—Å—Ç:\n{text}" for name, author, text in results])


def check_message(chat_id, message):
    global user_states

    if message.lower() == '/start':
        user_states.pop(chat_id, None)
        send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ—ç—Ç–∞—Ö –ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞.")
        reply_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    elif message.lower() == '–æ –±–æ—Ç–µ':
        send_message(chat_id, '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º –ø–æ—ç—Ç–æ–≤ –æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.')
        reply_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    elif message.lower() == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)':
        send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–º–µ—Ç–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º.')
        user_states[chat_id] = 'awaiting_address'

    elif chat_id in user_states:
        state = user_states[chat_id]

        if state == 'awaiting_address':
            location_info = geocode_address(message)
            if location_info:
                lat, lon, address = location_info
                user_states[chat_id] = {
                    'state': 'awaiting_confirmation',
                    'address_info': address,
                    'latitude': lat,
                    'longitude': lon
                }
                send_message(chat_id, f"{address}\n\n–≠—Ç–æ —Ç–æ—Ç –∞–¥—Ä–µ—Å? (–¥–∞/–Ω–µ—Ç)")
            else:
                send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        elif isinstance(state, dict) and state.get('state') == 'awaiting_confirmation':
            if message.strip().lower() in ['–¥–∞', 'yes', '–æ–∫']:
                address = state['address_info']
                poem = get_poem_by_location(address)
                send_message(chat_id, poem)
                user_states[chat_id] = 'default'
            elif message.strip().lower() in ['–Ω–µ—Ç', 'no']:
                send_message(chat_id, "–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–Ω–æ–≤–∞ (—É—Ç–æ—á–Ω–∏—Ç–µ):")
                user_states[chat_id] = 'awaiting_address'
            else:
                send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
    else:
        reply_keyboard(chat_id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.')


def run():
    update_id = 0
    while True:
        time.sleep(2)
        messages = get_updates(update_id)
        for message in messages:
            if update_id < message['update_id']:
                update_id = message['update_id']
                chat_id = message['message']['chat']['id']
                user_message = message['message'].get('text')

                if user_message:
                    check_message(chat_id, user_message)

                user_location = message['message'].get('location')
                if user_location:
                    latitude = user_location['latitude']
                    longitude = user_location['longitude']
                    address = geocoder(latitude, longitude)
                    send_message(chat_id, address)
                    poem = get_poem_by_location(address)
                    send_message(chat_id, poem)


if __name__ == '__main__':
    run()
